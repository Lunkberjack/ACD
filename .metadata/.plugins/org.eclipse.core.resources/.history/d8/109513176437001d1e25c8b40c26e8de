package main;
import java.io.File;
import java.io.IOException;
/**
 * Trabaja creando estructuras de archivos y directorios, y usa métodos
 * para comprobar su funcionamiento y estado.
 * 
 * 2. Crea un método de Java que dado como entrada el directorio raíz
 * del ejercicio 1, liste los ficheros y directorios del mismo, mostrando
 * la misma información que se ve en el ejercicio 1.
 *
 * 3. Modifica el método del ejercicio 2 para que pueda listar cualquier estructura
 * de ficheros y directorios que contenga el directorio raíz pasado como parámetro.
 * Pruébalo con varias estructuras de directorios y ficheros.
 * 
 * 4. Escribir un método que muestre los nombres de los archivos de un directorio,
 * que se pasará como argumento cuya extensión coincida con la que se pase como
 * segundo argumento.
 *
 * 5. Escribe un método que borre todos los ficheros que tienen la extensión txt
 * dentro de un directorio que se pasará como parámetro.
 *
 * @author LuciaLM
 * @version 1.0
 */
public class Main {
	public static void main(String[] args) {
		Main main = new Main();
		try {
			main.crearEstructura();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	private void crearEstructura() throws IOException {
		// EJ 1
		File raiz = new File("/home/lucia");
		File d = new File("/home/lucia/Escritorio", "d");
		d.mkdir();
		File d1 = new File(d, "d1");
		d1.mkdir();
		File d2 = new File(d, "d2");
		d2.mkdir();
		File d3 = new File(d, "d3");
		d3.mkdir();
		// Ficheros d1
		File f11 = new File(d1, "f11.txt");
		f11.createNewFile();
		File f12 = new File(d1, "f12.txt");
		f12.createNewFile();
		// Ficheros d2
		File d21 = new File(d2, "d21");
		d21.mkdir();
		File f21 = new File(d2, "f21.txt");
		f21.createNewFile();
		File d22 = new File(d2, "d22");
		d22.mkdir();
		File f222 = new File(d22, "f222.txt");
		f222.createNewFile();
		// Ficheros d3
		File d31 = new File(d3, "d31");
		d31.mkdir();
		File imagen = new File(d3, "imagen.jpito");
		imagen.createNewFile();
		
		//EJ 2
		String[] contD = d.list();
		String[] contD1 = d1.list();
		String[] contD2 = d2.list();
		String[] contD3 = d3.list();
		String[] contD22 = d22.list();
		for(String x : contD) {
			System.out.println(x);
		}
		for(String x : contD1) {
			System.out.println(x);
		}
		for(String x : contD2) {
			System.out.println(x);
		}
		for(String x : contD22) {
			System.out.println(x);
		}
		for(String x : contD3) {
			System.out.println(x);
		}
		System.out.println("-----------");
		//prueba("pito.pito.xd");
		//listarRecursivo(raiz);
		//System.out.println("oooooooooo");
		listarExtension(d, "jpito");
	}
	/**
	 * EJ 3
	 * Lista recursivamente todos los directorios y ficheros de un directorio
	 * especificado.
	 * @param carp - el directorio a listar
	 */
	private void listarRecursivo(File carp) {
        File[] carpetas = carp.listFiles();
        // Si y solo si hay algún fichero en el directorio, entra al bucle
        if(carpetas != null) {
        	// Recorre todos los directorios y archivos de carp (solo primer nivel)
            for (File x : carpetas) {
            	// Imprime el nombre del primer nivel de archivos
                System.out.println(x.getName());
                /*Si en el primer nivel encuentra un directorio, tras imprimir su
                nombre llama de nuevo al propio método con un nuevo argumento
                (recursividad). El nuevo argumento es el propio directorio nuevo.
                Esto se repite para todos los nuevos directorios que vaya 
                encontrando, acumulándose las llamadas al método en el stack.
                Java sin embargo no está preparado para algoritmos recursivos,
                y esto puede llevar a ese error tan común, StackOverflow.*/
                if (x.isDirectory()) {
                	listarRecursivo(x);
                }
            }
        }
    }
	
	private void prueba(String texto) {
		String[] separaos = texto.split("\\.");
		for(String x : separaos) {
			System.out.println(x);
		}
	}
	
	private void listarExtension(File carp, String ext) {
        File[] carpetas = carp.listFiles();
        String extension;
        if(carpetas != null) {
            for (File x : carpetas) {
            	// Si es un fichero CON EXTENSIÓN, y no más de 5 caracteres para dicha extensión:
                if(x.getName().contains("." + ext) && (x.getName().lastIndexOf("." + ext) >= x.getName().length() - 6)) {
                	// Para confirmar que la secuencia puede aparecer antes,
                	// pero solo se tendrá en cuenta la última aparición.
                    	System.out.println(x.getName());
                    }
                }
                // Si es un directorio y, por tanto, se debe volver a listar:
                if(x.isDirectory()) {
//                	System.out.println(x.getName());
                	listarExtension(x, ext);
                }
            }
        }
	}
	


	String getFileExtension(File file) {
	    if (file == null) {
	        return "";
	    }
	    String name = file.getName();
	    int i = name.lastIndexOf('.');
	    String ext = i > 0 ? name.substring(i + 1) : "";
	    return ext;
	}

}